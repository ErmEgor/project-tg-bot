import asyncio
import json
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    BotCommand
)
from aiohttp import web
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log')
    ]
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TOKEN", "7711881075:AAH9Yvz9vRTabNUcn7fk5asEX6RoL0Gy9_k")
ADMIN_ID = int(os.getenv("ADMIN_ID", "7586559527"))
WEBHOOK_HOST = "https://project-tg-bot.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ALLOWED_ORIGINS = [
    "https://project-tg-frontend-git-main-ermegors-projects.vercel.app",
    "http://localhost:3000"
]

async def cors_middleware(app, handler):
    async def middleware(request):
        origin = request.headers.get('Origin', '')
        logger.info(f"[Middleware] Origin: {origin}, Method: {request.method}")
        await send_log_to_telegram(f"[Middleware] Origin: {origin}, Method: {request.method}")
        response = await handler(request)
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'POST, OPTIONS, GET'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Accept'
        return response
    return middleware

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram
async def send_log_to_telegram(message):
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=f"<b>–õ–æ–≥ (main.py):</b>\n{message}", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìå –ü–æ–º–æ—â—å"), KeyboardButton(text="üì± –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –û–±–æ –º–Ω–µ"), KeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)

portfolio_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url="https://project-tg-frontend-git-main-ermegors-projects.vercel.app/")),
        InlineKeyboardButton(text="üåê –õ–µ–Ω–¥–∏–Ω–≥", url="https://ermegor.github.io/BuildMax/")
    ]
])

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

help_keyboard = back_keyboard
about_keyboard = back_keyboard
contact_keyboard = back_keyboard

contact_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìß –ü–æ—á—Ç–∞", url="mailto:ermilegor@gmail.com"),
        InlineKeyboardButton(text="üì® Telegram", url="tg://resolve?domain=prostof2p")
    ]
])

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand(command="portfolio", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"),
        BotCommand(command="about", description="–£–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ"),
        BotCommand(command="contact", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π"),
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    await send_log_to_telegram("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
async def on_startup():
    logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
    await send_log_to_telegram("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        await send_log_to_telegram("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        webhook_info = await bot.get_webhook_info()
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
        await send_log_to_telegram(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
        if webhook_info.url:
            raise Exception("–í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        await send_log_to_telegram(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise

    try:
        await bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        webhook_info = await bot.get_webhook_info()
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
        await send_log_to_telegram(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_info}")
        if webhook_info.url != WEBHOOK_URL:
            raise Exception("–í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        await send_log_to_telegram(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise

async def on_shutdown():
    logger.info("–£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫...")
    await send_log_to_telegram("–£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        await send_log_to_telegram("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        await send_log_to_telegram(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    await bot.session.close()
    logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    await send_log_to_telegram("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=main_keyboard)

@dp.message(Command("help"))
async def process_help_command(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    await message.answer(
        "<b>–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏.</b>\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç ‚Äî –æ–¥–Ω–∞ –∏–∑ —Ä–∞–±–æ—Ç <b>–ï.–ï–≥–æ—Ä–∞</b>.\n"
        "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –ï–≥–æ—Ä–∞.\n"
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram.\n"
        "–õ–µ–Ω–¥–∏–Ω–≥ ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–∞–π—Ç —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –¥–∏–∑–∞–π–Ω–æ–º.",
        parse_mode=ParseMode.HTML,
        reply_markup=help_keyboard
    )

@dp.message(lambda m: m.text == "üìå –ü–æ–º–æ—â—å")
async def process_help_button(message: types.Message):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å –æ—Ç {message.from_user.id}")
    await process_help_command(message)

@dp.message(Command("portfolio"))
async def process_portfolio_command(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ö–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç {message.from_user.id}")
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç:", reply_markup=portfolio_inline_keyboard)

@dp.message(lambda m: m.text == "üì± –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
async def process_portfolio_button(message: types.Message):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç {message.from_user.id}")
    await process_portfolio_command(message)

@dp.message(Command("about"))
async def process_about_command(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /about –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ö–æ–º–∞–Ω–¥–∞ /about –æ—Ç {message.from_user.id}")
    await message.answer(
        "<b>–û–±–æ –º–Ω–µ</b>\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≥–æ—Ä, –º–Ω–µ 14 –ª–µ—Ç. –Ø –Ω–∞—á–∏–Ω–∞—é—â–∏–π Telegram-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.\n"
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã: —Å–∞–π—Ç, –±–æ—Ç –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ò—â—É –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã —Ä–∞—Å—Ç–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.",
        parse_mode=ParseMode.HTML,
        reply_markup=about_keyboard
    )

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ")
async def process_about_button(message: types.Message):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û–±–æ –º–Ω–µ –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û–±–æ –º–Ω–µ –æ—Ç {message.from_user.id}")
    await process_about_command(message)

@dp.message(Command("contact"))
async def process_contact_command(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /contact –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ö–æ–º–∞–Ω–¥–∞ /contact –æ—Ç {message.from_user.id}")
    await message.answer(
        "<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π</b>\n"
        "–ü–æ—á—Ç–∞: <a href='mailto:ermilegor@gmail.com'>ermilegor@gmail.com</a>\n"
        "Telegram: <a href='https://t.me/prostof2p'>@prostof2p</a>",
        parse_mode=ParseMode.HTML,
        reply_markup=contact_keyboard
    )
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=contact_inline_keyboard)

@dp.message(lambda m: m.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è")
async def process_contact_button(message: types.Message):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°–≤—è–∑–∞—Ç—å—Å—è –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°–≤—è–∑–∞—Ç—å—Å—è –æ—Ç {message.from_user.id}")
    await process_contact_command(message)

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def process_back(message: types.Message):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –æ—Ç {message.from_user.id}")
    await send_log_to_telegram(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –æ—Ç {message.from_user.id}")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_keyboard)

@dp.message()
async def handle_web_app_data(message: types.Message):
    if message.content_type == ContentType.WEB_APP_DATA:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –æ—Ç {message.from_user.id}: {message.web_app_data.data}")
        await send_log_to_telegram(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –æ—Ç {message.from_user.id}: {message.web_app_data.data}")
        try:
            data = json.loads(message.web_app_data.data)
            if data.get('action') == 'back':
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 'back' –æ—Ç {message.from_user.id}")
                await send_log_to_telegram(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 'back' –æ—Ç {message.from_user.id}")
                await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_keyboard)
                return
            name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            msg_text = data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            text = f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (Web App)</b>\n–ò–º—è: {name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}\n–û—Ç: {message.from_user.id}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}: {text}")
            await send_log_to_telegram(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {text}")
            await bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode=ParseMode.HTML)
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.", reply_markup=main_keyboard)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
            await send_log_to_telegram(f"–û—à–∏–±–∫–∞ JSON: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            await send_log_to_telegram(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard)
    else:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
        await send_log_to_telegram(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
        await message.answer(
            "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ Web App. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            parse_mode=ParseMode.HTML,
            reply_markup=main_keyboard
        )

# --- HTTP-–º–∞—Ä—à—Ä—É—Ç—ã ---
async def handle_root(request):
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç")
    await send_log_to_telegram("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /")
    return web.Response(text="Bot is running")

async def handle_logs(request):
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    await send_log_to_telegram("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ /logs")
    try:
        with open('app.log', 'r') as f:
            logs = f.read()
        return web.Response(text=logs)
    except FileNotFoundError:
        return web.Response(text="–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def handle_test(request):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å /test")
    await send_log_to_telegram("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å /test")
    try:
        await bot.send_message(chat_id=ADMIN_ID, text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ main.py")
        return web.Response(text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await send_log_to_telegram(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return web.Response(text=f"–û—à–∏–±–∫–∞: {e}")

async def handle_submit(request):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.method} /submit")
    await send_log_to_telegram(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.method} /submit")
    
    headers_str = ", ".join([f"{key}: {value}" for key, value in request.headers.items()])
    logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {headers_str}")
    await send_log_to_telegram(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {headers_str}")
    
    try:
        raw_data = await request.read()
        data = json.loads(raw_data.decode('utf-8'))
        logger.info(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        await send_log_to_telegram(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(data, ensure_ascii=False)}")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}")
        await send_log_to_telegram(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {str(e)}")
        return web.Response(text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", status=400)

    name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    message = data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    msg = f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)</b>\n–ò–º—è: {name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}: {msg}")
    await send_log_to_telegram(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {msg}")
    
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode=ParseMode.HTML)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await send_log_to_telegram("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return web.json_response({"status": "success"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await send_log_to_telegram(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return web.Response(text=f"–û—à–∏–±–∫–∞: {str(e)}", status=500)

# --- –ó–∞–ø—É—Å–∫ ---
app = web.Application(middlewares=[cors_middleware])
request_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
request_handler.register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)
app.add_routes([
    web.get('/', handle_root),
    web.get('/logs', handle_logs),
    web.get('/test', handle_test),
    web.post('/submit', handle_submit),
    web.options('/submit', handle_submit)  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OPTIONS –¥–ª—è CORS
])

async def main():
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º...")
    await send_log_to_telegram("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º...")
    await set_bot_commands()
    await on_startup()
    app.on_shutdown.append(lambda _: on_shutdown())
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()
    logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    await send_log_to_telegram(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())