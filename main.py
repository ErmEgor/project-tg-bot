import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    BotCommand
)
from aiohttp import web
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

TOKEN = "7711881075:AAHIzBzogyLUSeitdeWzR2Ahq-KpN1MTR9U"
ADMIN_ID = 7586559527  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à ID
WEBHOOK_HOST = "https://project-tg-bot.onrender.com"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìå –ü–æ–º–æ—â—å"), KeyboardButton(text="üì± –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –û–±–æ –º–Ω–µ"), KeyboardButton(text="üì© –°–≤—è–∑–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)

portfolio_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url="https://project-tg-frontend-git-main-ermegors-projects.vercel.app")),
        InlineKeyboardButton(text="üåê –õ–µ–Ω–¥–∏–Ω–≥", url="https://ermegor.github.io/BuildMax/")
    ]
])

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

help_keyboard = back_keyboard
about_keyboard = back_keyboard
contact_keyboard = back_keyboard

contact_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìß –ü–æ—á—Ç–∞", url="mailto:ermilegor@gmail.com"),
        InlineKeyboardButton(text="üì® Telegram", url="tg://resolve?domain=prostof2p")
    ]
])

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---

async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
        BotCommand(command="portfolio", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"),
        BotCommand(command="about", description="–£–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ"),
        BotCommand(command="contact", description="–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π"),
    ]
    await bot.set_my_commands(commands)
    print("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---

async def on_startup():
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        webhook_info = await bot.get_webhook_info()
        print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
        if webhook_info.url:
            raise Exception("–í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise

    try:
        await bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
        print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
        webhook_info = await bot.get_webhook_info()
        print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
        if webhook_info.url != WEBHOOK_URL:
            raise Exception("–í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise

async def on_shutdown():
    print("–£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    await bot.session.close()
    print("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")
    await message.answer(f"–í–∞—à ID: {message.from_user.id}\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

@dp.message(Command("help"))
async def process_help_command(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.id}")
    await message.answer(
        "<b>–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏.</b>\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç ‚Äî –æ–¥–Ω–∞ –∏–∑ —Ä–∞–±–æ—Ç <b>–ï.–ï–≥–æ—Ä–∞</b>.\n"
        "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –ï–≥–æ—Ä–∞.\n"
        "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram.\n"
        "–õ–µ–Ω–¥–∏–Ω–≥ ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–∞–π—Ç —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –¥–∏–∑–∞–π–Ω–æ–º.",
        parse_mode=ParseMode.HTML,
        reply_markup=help_keyboard
    )

@dp.message(lambda m: m.text == "üìå –ü–æ–º–æ—â—å")
async def process_help_button(message: types.Message):
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å –æ—Ç {message.from_user.id}")
    await process_help_command(message)

@dp.message(Command("portfolio"))
async def process_portfolio_command(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /portfolio –æ—Ç {message.from_user.id}")
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç:", reply_markup=portfolio_inline_keyboard)

@dp.message(lambda m: m.text == "üì± –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
async def process_portfolio_button(message: types.Message):
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç {message.from_user.id}")
    await process_portfolio_command(message)

@dp.message(Command("about"))
async def process_about_command(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /about –æ—Ç {message.from_user.id}")
    await message.answer(
        "<b>–û–±–æ –º–Ω–µ</b>\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ï–≥–æ—Ä, –º–Ω–µ 14 –ª–µ—Ç. –Ø –Ω–∞—á–∏–Ω–∞—é—â–∏–π Telegram-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.\n"
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã: —Å–∞–π—Ç, –±–æ—Ç –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ò—â—É –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã —Ä–∞—Å—Ç–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.",
        parse_mode=ParseMode.HTML,
        reply_markup=about_keyboard
    )

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û–±–æ –º–Ω–µ")
async def process_about_button(message: types.Message):
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û–±–æ –º–Ω–µ –æ—Ç {message.from_user.id}")
    await process_about_command(message)

@dp.message(Command("contact"))
async def process_contact_command(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /contact –æ—Ç {message.from_user.id}")
    await message.answer(
        "<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π</b>\n"
        "–ü–æ—á—Ç–∞: <a href='mailto:ermilegor@gmail.com'>ermilegor@gmail.com</a>\n"
        "Telegram: <a href='https://t.me/prostof2p'>@prostof2p</a>",
        parse_mode=ParseMode.HTML,
        reply_markup=contact_keyboard
    )
    await message.answer("–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:", reply_markup=contact_inline_keyboard)

@dp.message(lambda m: m.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è")
async def process_contact_button(message: types.Message):
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°–≤—è–∑–∞—Ç—å—Å—è –æ—Ç {message.from_user.id}")
    await process_contact_command(message)

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def process_back(message: types.Message):
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –æ—Ç {message.from_user.id}")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@dp.message()
async def handle_web_app_data(message: types.Message):
    if message.content_type == ContentType.WEB_APP_DATA:
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –æ—Ç {message.from_user.id}: {message.web_app_data.data}")
        try:
            data = json.loads(message.web_app_data.data)
            name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            msg_text = data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            text = f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (Web App)</b>\n–ò–º—è: {name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}\n–û—Ç: {message.from_user.id}"
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}: {text}")
            await bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode=ParseMode.HTML)
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.", reply_markup=main_keyboard)
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ JSON: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
async def handle_submit(request):
    try:
        data = await request.json()
        print(f"–ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å: {data}")
        name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        msg_text = data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        text = f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)</b>\n–ò–º—è: {name}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {msg_text}"
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}: {text}")
        await bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode=ParseMode.HTML)
        return web.json_response({'status': 'success'})
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ JSON –≤ POST-–∑–∞–ø—Ä–æ—Å–µ: {e}")
        return web.json_response({'status': 'error', 'message': 'Invalid JSON'}, status=400)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        return web.json_response({'status': 'error', 'message': str(e)}, status=400)

# –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def default_handler(message: types.Message):
    if message.content_type == ContentType.WEB_APP_DATA:
        return
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    await message.answer(
        "<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=main_keyboard
    )

# --- –ó–∞–ø—É—Å–∫ ---
app = web.Application()
request_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
request_handler.register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

async def main():
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º...")
    await set_bot_commands()
    await on_startup()
    app.on_shutdown.append(lambda _: on_shutdown())
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEBAPP_HOST, WEBAPP_PORT)
    await site.start()
    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEBAPP_HOST}:{WEBAPP_PORT}")
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())